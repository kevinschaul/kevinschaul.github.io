<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kevin Schaul</title>
    <link>https://www.kschaul.com/</link>
    <description>Recent content on Kevin Schaul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Jul 2023 09:15:00 -0500</lastBuildDate><atom:link href="https://www.kschaul.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>avoid-overlap: Utilities for chart-makers to avoid text overlaps in their graphics</title>
      <link>https://www.kschaul.com/post/2023/07/10/avoid-overlap-utilities-for-chart-makers-to-avoid-text-overlaps-in-their-graphics/</link>
      <pubDate>Mon, 10 Jul 2023 09:15:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/post/2023/07/10/avoid-overlap-utilities-for-chart-makers-to-avoid-text-overlaps-in-their-graphics/</guid>
      <description>I&amp;rsquo;ve been working on a library to help chart-makers avoid text overlaps in their graphics, and it&amp;rsquo;s finally in a place worth sharing. Check it out on GitHub or in action at two of my recent graphics.
Labeling charts, maps and other graphics is more art than science, but there are some general rules we can follow to achieve good results programmatically. This library provides two label-avoidance techniques: nudge and choices.</description>
      
      <category>d3</category>
      
      <category>frontend</category>
      
    </item>
    
    <item>
      <title>Are you middle class?</title>
      <link>https://www.washingtonpost.com/business/interactive/2023/middle-class-income/</link>
      <pubDate>Thu, 01 Jun 2023 06:00:00 -0500</pubDate>
      
      <guid>https://www.washingtonpost.com/business/interactive/2023/middle-class-income/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>See how AI got so good, so fast</title>
      <link>https://www.washingtonpost.com/business/interactive/2023/artificial-intelligence-tech-rapid-advances/</link>
      <pubDate>Fri, 26 May 2023 08:10:00 -0500</pubDate>
      
      <guid>https://www.washingtonpost.com/business/interactive/2023/artificial-intelligence-tech-rapid-advances/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>Run a command when files change</title>
      <link>https://www.kschaul.com/til/2023/05/26/run-a-command-when-files-change/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2023/05/26/run-a-command-when-files-change/</guid>
      <description>TIL about entr, a command that lets you run arbitrary commands whenever files change.
I was working on a project where I had to run a build command whenever I saved a file. Once I installed entr (brew install entr), it took me about 5 seconds to figure out how to use it for this purpose.
find apple-news/ | entr -s &amp;#39;npm run bespoke&amp;#39; Any time a tile inside the directory apple-news changes, npm run bespoke gets run.</description>
      
      <category>command line</category>
      
    </item>
    
    <item>
      <title>How we analyzed the websites in a commonly used AI training dataset</title>
      <link>https://www.kschaul.com/post/2023/04/21/how-we-analyzed-the-websites-in-a-commonly-used-ai-training-dataset/</link>
      <pubDate>Fri, 21 Apr 2023 08:15:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/post/2023/04/21/how-we-analyzed-the-websites-in-a-commonly-used-ai-training-dataset/</guid>
      <description>My colleagues and I recently published this analysis of 15 million websites in a commonly used AI training dataset. Here&amp;rsquo;s a little bit about how we did it.
Allen Institute researchers kindly provided us with the top 1,000 domains in Google’s C4 dataset. But that was just 8% of tokens, hardly representative. So they then pulled all 15.7M domains. We planned to categorize the top 1,000 websites by hand, but all 15.</description>
      
    </item>
    
    <item>
      <title>See the websites that make AI like ChatGPT sound so smart</title>
      <link>https://www.washingtonpost.com/technology/interactive/2023/ai-chatbot-learning/</link>
      <pubDate>Fri, 21 Apr 2023 08:10:00 -0500</pubDate>
      
      <guid>https://www.washingtonpost.com/technology/interactive/2023/ai-chatbot-learning/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>Feedmaker: Quickly generate an RSS feed from any website</title>
      <link>https://www.kschaul.com/post/2023/04/16/feedmaker-quickly-generate-an-rss-feed-from-any-website/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/post/2023/04/16/feedmaker-quickly-generate-an-rss-feed-from-any-website/</guid>
      <description>I&amp;rsquo;ve been diverting much of my web browsing away from social media and towards RSS feeds, but there are so many sites that don&amp;rsquo;t offer the feeds for the content I care about.
Today I&amp;rsquo;m sharing a side project called Feedmaker (Source on GitHub). It&amp;rsquo;s a service that lets you generate RSS feeds from websites in next to no time. Just figure out a couple CSS selectors and pass them as URL parameters.</description>
      
      <category>rss</category>
      
      <category>django</category>
      
    </item>
    
    <item>
      <title>Control HTML table widths with table-layout: fixed;</title>
      <link>https://www.kschaul.com/til/2023/03/30/control-html-table-widths-with-table-layout-fixed/</link>
      <pubDate>Thu, 30 Mar 2023 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2023/03/30/control-html-table-widths-with-table-layout-fixed/</guid>
      <description>Just learned about the CSS property table-layout: fixed; that makes HTML table column widths follow sane rules. They will actually respect the width values you give them.
There are a lot of great usage examples on this css tricks post from &amp;hellip; 2014. How did I not know about this?</description>
      
      <category>frontend</category>
      
    </item>
    
    <item>
      <title>Write nested JSON with keys in R/tidyverse</title>
      <link>https://www.kschaul.com/til/2023/03/22/write-nested-json-with-keys-in-r-tidyverse/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2023/03/22/write-nested-json-with-keys-in-r-tidyverse/</guid>
      <description>I always struggle to write JSON in R in exactly the format I need. I figured out a trick today to take a dataframe, nest it by a column and write it to a JSON with that column&amp;rsquo;s values as keys.
To nest a table like this:
## # A tibble: 2 × 3 ## col_to_nest another_col a_third_col ## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; ## 1 col_value_a 1213691 14616745740 ## 2 col_value_b 1167231 13592103952 Try this:</description>
      
      <category>R</category>
      
    </item>
    
    <item>
      <title>Speed up tidyverse analysis with dtplyr</title>
      <link>https://www.kschaul.com/til/2023/03/21/speed-up-tidyverse-analysis-with-dtplyr/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2023/03/21/speed-up-tidyverse-analysis-with-dtplyr/</guid>
      <description>I&amp;rsquo;ve got a ~15 million rows dataset that I need to do cleaning on. I&amp;rsquo;m a big tidyverse fan, but dplyr is slower than data.table.
Well, TIL about dtplyr, which lets you write dplyr code but gain the speed of data.table:
library(data.table) library(dtplyr) library(dplyr, warn.conflicts=FALSE) data_lazy &amp;lt;- data %&amp;gt;% lazy_dt(immutable=FALSE) data_lazy %&amp;gt;% mutate(...) %&amp;gt;% group_by(column) %&amp;gt;% summarize(...) %&amp;gt;% as_tibble() Take a look at the immutable argument in the docs. This runs soooo much faster.</description>
      
      <category>R</category>
      
    </item>
    
  </channel>
</rss>
