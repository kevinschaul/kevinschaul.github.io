<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Kevin Schaul</title>
    <link>https://www.kschaul.com/tags/r/</link>
    <description>Recent content in R on Kevin Schaul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Aug 2022 00:00:00 -0500</lastBuildDate><atom:link href="https://www.kschaul.com/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Caching R code with cache_rds()</title>
      <link>https://www.kschaul.com/til/2022/08/18/caching-r-code-with-cache-rds/</link>
      <pubDate>Thu, 18 Aug 2022 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2022/08/18/caching-r-code-with-cache-rds/</guid>
      <description>If you&amp;rsquo;ve got R code that takes a while to run (a query? complex analysis?), check out the fantastic cache_rds() function from Yihui Xie’s xfun package.
Let&amp;rsquo;s say you want to get census data from tidycensus, but you don’t want to keep hitting the API. Instead of writing:
cbsa_pop &amp;lt;- get_decennial(geography=&amp;#39;cbsa&amp;#39;, variables=&amp;#39;P1_001N&amp;#39;, year=2020) You write:
cbsa_pop &amp;lt;- cache_rds({ get_decennial(geography=&amp;#39;cbsa&amp;#39;, variables=&amp;#39;P1_001N&amp;#39;, year=2020) }) The first time you run it, it will hit the census API like usual.</description>
    </item>
    
    <item>
      <title>Create a new TIL</title>
      <link>https://www.kschaul.com/til/2022/08/15/create-a-new-til/</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2022/08/15/create-a-new-til/</guid>
      <description>To create a new TIL post using blogdown/Hugo:
library(blogdown) blogdown::new_post(&amp;#39;your-new-til-slug-here&amp;#39;, kind=&amp;#39;til&amp;#39;, subdir=&amp;#39;til&amp;#39;) </description>
    </item>
    
  </channel>
</rss>
