<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned on Kevin Schaul</title>
    <link>https://www.kschaul.com/til/</link>
    <description>Recent content in Today I Learned on Kevin Schaul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Mar 2023 00:00:00 -0500</lastBuildDate><atom:link href="https://www.kschaul.com/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Speed up tidyverse analysis with dtplyr</title>
      <link>https://www.kschaul.com/til/2023/03/21/speed-up-tidyverse-analysis-with-dtplyr/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2023/03/21/speed-up-tidyverse-analysis-with-dtplyr/</guid>
      <description>I&amp;rsquo;ve got a ~15 million rows dataset that I need to do cleaning on. I&amp;rsquo;m a big tidyverse fan, but dplyr is slower than data.table.
Well, TIL about dtplyr, which lets you write dplyr code but gain the speed of data.table:
library(data.table) library(dtplyr) library(dplyr, warn.conflicts=FALSE) data_lazy &amp;lt;- data %&amp;gt;% lazy_dt(immutable=FALSE) data_lazy %&amp;gt;% mutate(...) %&amp;gt;% group_by(column) %&amp;gt;% summarize(...) %&amp;gt;% as_tibble() Take a look at the immutable argument in the docs. This runs soooo much faster.</description>
    </item>
    
    <item>
      <title>Extract mbtiles into zxy files with tippecanoe</title>
      <link>https://www.kschaul.com/til/2022/12/29/extract-mbtiles-to-zxy-files-with-tippecanoe/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 -0600</pubDate>
      
      <guid>https://www.kschaul.com/til/2022/12/29/extract-mbtiles-to-zxy-files-with-tippecanoe/</guid>
      <description>The next time you need to extract an .mbtiles file into tile files, reach for tippecanoe. I’ve used it often for creating .mbtiles files but not for extracting tiles out of them.
It turns out you can the embedded command tile-join for this task:
$ tile-join --force --no-tile-compression --no-tile-size-limit --output-to-directory tiles 2017-07-03_north-america.mbtiles --minimum-zoom 6 --maximum-zoom 10 h/t yuiseki</description>
    </item>
    
    <item>
      <title>Writing D3 in React with an escape hatch</title>
      <link>https://www.kschaul.com/til/2022/12/19/writing-d3-in-react-with-an-escape-hatch/</link>
      <pubDate>Mon, 19 Dec 2022 00:00:00 -0600</pubDate>
      
      <guid>https://www.kschaul.com/til/2022/12/19/writing-d3-in-react-with-an-escape-hatch/</guid>
      <description>Most of The Washington Post has moved to React for site rendering. This is hugely beneficial overall but for many graphics reporters it’s yet another thing to learn to get stories published.
It’s already overwhelming to learn HTML/CSS/JS, data analysis, some way to build charts, some mapping tool. I’m interested in lowering the barriers to entry for this field.
Fortunately there’s a fairly simple pattern we can build into our tooling to bring back some simplicity of the pre-React frontend development.</description>
    </item>
    
    <item>
      <title>Coloring emoji/unicode characters on iOS Safari</title>
      <link>https://www.kschaul.com/til/2022/09/13/coloring-emoji-unicode-characters-on-ios-safari/</link>
      <pubDate>Tue, 13 Sep 2022 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2022/09/13/coloring-emoji-unicode-characters-on-ios-safari/</guid>
      <description>Unicode characters such as ■ (black square U+25A0) can be super useful to use for icons without needing to load an icon font. And they can typically be styled using CSS, like: color: steelblue;.
But on iOS safari (and likely Android and other devices), these are rendered in the cartooney, emoji style — which means trying to color them with CSS doesn’t work.
Fortunately there is an easy (but cryptic) fix: Simply append &amp;amp;#xFE0E; immediately following your unicode character, like ■&amp;amp;#xFE0E;.</description>
    </item>
    
    <item>
      <title>Caching R code with cache_rds()</title>
      <link>https://www.kschaul.com/til/2022/08/18/caching-r-code-with-cache-rds/</link>
      <pubDate>Thu, 18 Aug 2022 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2022/08/18/caching-r-code-with-cache-rds/</guid>
      <description>If you&amp;rsquo;ve got R code that takes a while to run (a query? complex analysis?), check out the fantastic cache_rds() function from Yihui Xie’s xfun package.
Let&amp;rsquo;s say you want to get census data from tidycensus, but you don’t want to keep hitting the API. Instead of writing:
cbsa_pop &amp;lt;- get_decennial(geography=&amp;#39;cbsa&amp;#39;, variables=&amp;#39;P1_001N&amp;#39;, year=2020) You write:
cbsa_pop &amp;lt;- cache_rds({ get_decennial(geography=&amp;#39;cbsa&amp;#39;, variables=&amp;#39;P1_001N&amp;#39;, year=2020) }) The first time you run it, it will hit the census API like usual.</description>
    </item>
    
    <item>
      <title>Create a new TIL</title>
      <link>https://www.kschaul.com/til/2022/08/15/create-a-new-til/</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 -0500</pubDate>
      
      <guid>https://www.kschaul.com/til/2022/08/15/create-a-new-til/</guid>
      <description>To create a new TIL post using blogdown/Hugo:
library(blogdown) blogdown::new_post(&amp;#39;your-new-til-slug-here&amp;#39;, kind=&amp;#39;til&amp;#39;, subdir=&amp;#39;til&amp;#39;) </description>
    </item>
    
  </channel>
</rss>
